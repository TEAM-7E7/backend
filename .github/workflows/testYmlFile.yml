# 액션이 시작할 때 기본적으로 시작하는 워크플로우
name: main

# 푸쉬하거나 풀리퀘스트 할 때 [ main ] 브랜치에서만 시작되게 함
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_NAME: selldio
  S3_BUCKET_NAME: sparta7e7
  CODE_DEPLOY_APP_NAME: AWSCodeDeploy
  DEPLOYMENT_GROUP_NAME: sparta_group

# 워크블로우가 실행할 작업들 순차적으로 실행되거나, 병렬로 실행된다
jobs:
  # build라는 작업 하나만 실행하는 워크플로우
  build:
    # job을 실행하는 프로그램
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    # 실행되는 순서를 스텝에 정리
    steps:
      - uses: actions/checkout@v2

      - name: JDK 11 설치
        uses: actions/setup-java@v1
        with:
          java-version: 11.0.8
          #distribution: 'temurin'

      - name: ./gradlew 권한 설정
        run: chmod +x ./gradlew

      - name: Gradle 빌드
        run: ./gradlew build

      # application.properties 생성
      - name: application.properties 생성
        # branch가 main일 때
        if: true
        run: |
          # spring의 resources 경로로 이동
          cd ./src/main/resources
          touch ./application.properties
          # GitHub-Actions에서 설정한 값을 application-dev.properties 파일에 쓰기
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./application.properties
        shell: bash
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew
        shell: bash
################################
      # 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy
        
      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      - name: Make zip file
        run: zip -r ./sparta.zip ./deploy
        shell: bash
################################


      - name: AWS 세팅
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.SECRET_KEY }}
          aws-region: ap-northeast-2

      - name: S3 업로드
        #run: aws s3 cp --region ap-northeast-2 ./sparta.zip s3://$S3_BUCKET_NAME/
        run: aws deploy push --application-name study-app-codedeploy-server --description "study-app server" --s3-location s3://study-codedeploy/server/build.zip --source .

      - name: 코드 배치하기
        run: aws deploy create-deployment --application-name $PROJECT_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name $DEPLOYMENT_GROUP_NAME --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=server/build.zip

################################
      # Deploy
      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          aws deploy create-deployment 
          --application-name $PROJECT_NAME
          --deployment-group-name $DEPLOYMENT_GROUP_NAME
          --file-exists-behavior OVERWRITE 
          --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=sparta.zip
          --region ap-northeast-2
################################
